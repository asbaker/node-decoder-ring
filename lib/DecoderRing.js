// Generated by CoffeeScript 1.6.1
(function() {
  var DecoderRing, FieldDecoder, FieldEncoder;

  FieldDecoder = require("./FieldDecoder");

  FieldEncoder = require("./FieldEncoder");

  DecoderRing = (function() {

    function DecoderRing(fieldDecoder, fieldEncoder) {
      this.fieldDecoder = fieldDecoder != null ? fieldDecoder : new FieldDecoder;
      this.fieldEncoder = fieldEncoder != null ? fieldEncoder : new FieldEncoder;
    }

    DecoderRing.prototype.decode = function(buffer, spec) {
      var decodeFun, field, obj, _i, _len, _ref;
      obj = {};
      if (spec.bigEndian) {
        decodeFun = this.fieldDecoder.decodeFieldBE;
      } else {
        decodeFun = this.fieldDecoder.decodeFieldLE;
      }
      _ref = spec.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        obj[field.name] = decodeFun(buffer, field);
      }
      return obj;
    };

    DecoderRing.prototype.encode = function(obj, spec) {
      var bitFieldAccumulator, buffer, currentVal, encodeFun, fieldSpec, r, size, val, _i, _j, _len, _len1, _ref, _ref1;
      size = this.fieldEncoder.findSpecBufferSize(spec);
      buffer = new Buffer(size);
      buffer.fill(0);
      if (spec.bigEndian) {
        encodeFun = this.fieldEncoder.encodeFieldBE;
      } else {
        encodeFun = this.fieldEncoder.encodeFieldLE;
      }
      bitFieldAccumulator = {};
      _ref = spec.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fieldSpec = _ref[_i];
        if (fieldSpec.type !== 'bit') {
          buffer = encodeFun(buffer, obj, fieldSpec);
        } else {
          val = obj[fieldSpec.name] ? Math.pow(2, fieldSpec.position) : 0;
          currentVal = bitFieldAccumulator["" + fieldSpec.start] || 0;
          bitFieldAccumulator["" + fieldSpec.start] = currentVal + val;
        }
      }
      _ref1 = Object.keys(bitFieldAccumulator);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        r = _ref1[_j];
        buffer = encodeFun(buffer, bitFieldAccumulator, {
          name: r,
          start: parseInt(r),
          type: 'uint8'
        });
      }
      return buffer;
    };

    return DecoderRing;

  })();

  module.exports = DecoderRing;

}).call(this);
